AWSTemplateFormatVersion: 2010-09-09
Description: My API Gateway and Lambda function

Parameters:
  apiGatewayName:
    Type: String
    Default: my-api
Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: dev

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: migration-bulk-processing-lambda-function
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const documentClient = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function(event, context) {
              let params;
              if (event.queryStringParameters.unprocessed) {
                  params = {
                      TableName: 'migration-metadata-table',
                      FilterExpression: 'status = :status',
                      ExpressionAttributeValues: {
                          ":status": 'unprocessed'
                      }
                  };
              }
              else {
                  params = {
                      TableName: 'migration-metadata-table',
                      FilterExpression: 'status = :status',
                      ExpressionAttributeValues: {
                          ":status": 'processed'
                      }
                  }
              }
              return await scanTable(params);
          }
          const scanTable = params => {
              return new Promise((res, rej) => {
                  documentClient.put(params, function(err, data) {
                      if (err) rej(err);
                      else res(data);
                  });
              })
          }
      Description: Invoke a function during stack creation.
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs14.x
      MemorySize: 512
      Timeout: 120

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/dev/GET/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: queryItemsFromDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:scan
              - dynamodb:update
              Resource:  'arn:aws:dynamodb:*:*:*'
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/migration-bulk-processing-lambda-function:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/migration-bulk-processing-lambda-function
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn